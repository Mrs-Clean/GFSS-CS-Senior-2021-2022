import java.util.*;
import java.io.*;
public class Main{
  static void gen(int n, int k, String s){ //n is # of bits (remaining) and k is # of 1's (remaining)
  //String is the string we are returning
    if (n == 1){ //base case when we are on the last bit
      if(k == 0){
        System.out.println(s + 0);
      }
      if(k == 1){
        System.out.println(s + 1);
      }
      return;
    }
    if (k > 0){ //allocating 1's if they are still available
      gen(n - 1, k - 1, s + "1"); //call function with -1 available # of bits and 1's, append "1" to the string we later return
    }
    //function is first called on cases where 1 is used, therefore preocessed earlier
    //problem asks for descending order, so 1's added earlier have higher value
    gen (n - 1,k , s + "0"); //call function again without using a "1"  on this iteration
    return;
  }
  public static void main(String[] args) throws IOException{
      Scanner in = new Scanner(System.in);
      int t = in.nextInt(); //number of test cases for problem
      for (int i = 0; i < t; i++){
          System.out.println("The bit patterns are");
          gen (in.nextInt(), in.nextInt(), "");
      }

  }
}
