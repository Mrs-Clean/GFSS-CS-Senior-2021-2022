#include <iostream>
#include <queue>
using namespace std;
const int INF = 1e9; //declares big number
int dis[9][9]; //distance array
queue< pair<int, int> >bfs; //bfs queue, contains pairs that hold the x and y coordinates 
void hop(int oldx, int oldy, int newx, int newy){ //function to checks if the move is valid and the shortest path to that square
  if(newx < 1 || newx > 8) return;
  if(newy < 1 || newy > 8) return;
  if(dis[newx][newy] > dis[oldx][oldy] + 1){
    dis[newx][newy] = dis[oldx][oldy] + 1;
    bfs.push({newx, newy});
  }
}
int main() {
  int startx, starty, endx, endy;
  cin >> startx >> starty >> endx >> endy;
  for(int x = 0; x < 9; x++){
    for(int y = 0; y < 9; y++){
      dis[x][y] = INF;
    }
  }
  dis[startx][starty] = 0; //this sets all distances to MAX_INT and the starting node to 0
  bfs.push({startx, starty}); //pushes starting node
  while(!bfs.empty()){
    int x = bfs.front().first, y = bfs.front().second;
    bfs.pop(); //stores front element and deletes
    //now travel along an edge, incrementing x and y the proper amount
    hop(x, y, x + 1, y + 2);
    hop(x, y, x + 2, y + 1);
    hop(x, y, x - 1, y + 2);
    hop(x, y, x - 2, y + 1);
    hop(x, y, x + 1, y - 2);
    hop(x, y, x + 2, y - 1);
    hop(x, y, x - 1, y - 2);
    hop(x, y, x - 2, y - 1);
  }
  cout << dis[endx][endy] << endl;
} 
